#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by xsd, Version=2.0.50727.3038.
// 
namespace MIPSDisassembler {
    using namespace System;
    ref class disassembler;
    
    
    /// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
    System::Serializable, 
    System::ComponentModel::DesignerCategoryAttribute(L"code"), 
    System::ComponentModel::ToolboxItem(true), 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedDataSetSchema"), 
    System::Xml::Serialization::XmlRootAttribute(L"disassembler"), 
    System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.DataSet")]
    public ref class disassembler : public ::System::Data::DataSet {
        public : ref class tabsDataTable;
        public : ref class tabDataTable;
        public : ref class processorDataTable;
        public : ref class tabsRow;
        public : ref class tabRow;
        public : ref class processorRow;
        public : ref class tabsRowChangeEvent;
        public : ref class tabRowChangeEvent;
        public : ref class processorRowChangeEvent;
        
        private: MIPSDisassembler::disassembler::tabsDataTable^  tabletabs;
        
        private: MIPSDisassembler::disassembler::tabDataTable^  tabletab;
        
        private: MIPSDisassembler::disassembler::processorDataTable^  tableprocessor;
        
        private: ::System::Data::DataRelation^  relationtabs_tab;
        
        private: ::System::Data::DataRelation^  relationtab_processor;
        
        private: ::System::Data::SchemaSerializationMode _schemaSerializationMode;
        
        public : delegate System::Void tabsRowChangeEventHandler(::System::Object^  sender, MIPSDisassembler::disassembler::tabsRowChangeEvent^  e);
        
        public : delegate System::Void tabRowChangeEventHandler(::System::Object^  sender, MIPSDisassembler::disassembler::tabRowChangeEvent^  e);
        
        public : delegate System::Void processorRowChangeEventHandler(::System::Object^  sender, MIPSDisassembler::disassembler::processorRowChangeEvent^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        disassembler();
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        disassembler(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property MIPSDisassembler::disassembler::tabsDataTable^  tabs {
            MIPSDisassembler::disassembler::tabsDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property MIPSDisassembler::disassembler::tabDataTable^  tab {
            MIPSDisassembler::disassembler::tabDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property MIPSDisassembler::disassembler::processorDataTable^  processor {
            MIPSDisassembler::disassembler::processorDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::BrowsableAttribute(true), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Visible)]
        virtual property ::System::Data::SchemaSerializationMode SchemaSerializationMode {
            ::System::Data::SchemaSerializationMode get() override;
            System::Void set(::System::Data::SchemaSerializationMode value) override;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataTableCollection^  Tables {
            ::System::Data::DataTableCollection^  get() new;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataRelationCollection^  Relations {
            ::System::Data::DataRelationCollection^  get() new;
        }
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void InitializeDerivedDataSet() override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataSet^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Boolean ShouldSerializeTables() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Boolean ShouldSerializeRelations() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void ReadXmlSerializable(::System::Xml::XmlReader^  reader) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Xml::Schema::XmlSchema^  GetSchemaSerializable() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars();
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars(::System::Boolean initTable);
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitClass();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializetabs();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializetab();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeprocessor();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class tabsDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columntabs_Id;
            
            public: event MIPSDisassembler::disassembler::tabsRowChangeEventHandler^  tabsRowChanging;
            
            public: event MIPSDisassembler::disassembler::tabsRowChangeEventHandler^  tabsRowChanged;
            
            public: event MIPSDisassembler::disassembler::tabsRowChangeEventHandler^  tabsRowDeleting;
            
            public: event MIPSDisassembler::disassembler::tabsRowChangeEventHandler^  tabsRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            tabsDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            tabsDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            tabsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  tabs_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property MIPSDisassembler::disassembler::tabsRow^  default [::System::Int32 ] {
                MIPSDisassembler::disassembler::tabsRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddtabsRow(MIPSDisassembler::disassembler::tabsRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            MIPSDisassembler::disassembler::tabsRow^  AddtabsRow();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            MIPSDisassembler::disassembler::tabsRow^  NewtabsRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemovetabsRow(MIPSDisassembler::disassembler::tabsRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class tabDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columntab_Id;
            
            private: ::System::Data::DataColumn^  columntabs_Id;
            
            public: event MIPSDisassembler::disassembler::tabRowChangeEventHandler^  tabRowChanging;
            
            public: event MIPSDisassembler::disassembler::tabRowChangeEventHandler^  tabRowChanged;
            
            public: event MIPSDisassembler::disassembler::tabRowChangeEventHandler^  tabRowDeleting;
            
            public: event MIPSDisassembler::disassembler::tabRowChangeEventHandler^  tabRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            tabDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            tabDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            tabDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  tab_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  tabs_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property MIPSDisassembler::disassembler::tabRow^  default [::System::Int32 ] {
                MIPSDisassembler::disassembler::tabRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddtabRow(MIPSDisassembler::disassembler::tabRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            MIPSDisassembler::disassembler::tabRow^  AddtabRow(System::String^  name, MIPSDisassembler::disassembler::tabsRow^  parenttabsRowBytabs_tab);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            MIPSDisassembler::disassembler::tabRow^  NewtabRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemovetabRow(MIPSDisassembler::disassembler::tabRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class processorDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  column_class;
            
            private: ::System::Data::DataColumn^  columnDLL;
            
            private: ::System::Data::DataColumn^  columntab_Id;
            
            public: event MIPSDisassembler::disassembler::processorRowChangeEventHandler^  processorRowChanging;
            
            public: event MIPSDisassembler::disassembler::processorRowChangeEventHandler^  processorRowChanged;
            
            public: event MIPSDisassembler::disassembler::processorRowChangeEventHandler^  processorRowDeleting;
            
            public: event MIPSDisassembler::disassembler::processorRowChangeEventHandler^  processorRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            processorDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            processorDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            processorDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  _classColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  DLLColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  tab_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property MIPSDisassembler::disassembler::processorRow^  default [::System::Int32 ] {
                MIPSDisassembler::disassembler::processorRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddprocessorRow(MIPSDisassembler::disassembler::processorRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            MIPSDisassembler::disassembler::processorRow^  AddprocessorRow(System::String^  name, System::String^  _class, 
                        System::String^  DLL, MIPSDisassembler::disassembler::tabRow^  parenttabRowBytab_processor);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            MIPSDisassembler::disassembler::processorRow^  NewprocessorRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveprocessorRow(MIPSDisassembler::disassembler::processorRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class tabsRow : public ::System::Data::DataRow {
            
            private: MIPSDisassembler::disassembler::tabsDataTable^  tabletabs;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            tabsRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 tabs_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< MIPSDisassembler::disassembler::tabRow^  >^  GettabRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class tabRow : public ::System::Data::DataRow {
            
            private: MIPSDisassembler::disassembler::tabDataTable^  tabletab;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            tabRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 tab_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 tabs_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property MIPSDisassembler::disassembler::tabsRow^  tabsRow {
                MIPSDisassembler::disassembler::tabsRow^  get();
                System::Void set(MIPSDisassembler::disassembler::tabsRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Istabs_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Settabs_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< MIPSDisassembler::disassembler::processorRow^  >^  GetprocessorRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class processorRow : public ::System::Data::DataRow {
            
            private: MIPSDisassembler::disassembler::processorDataTable^  tableprocessor;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            processorRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  _class {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  DLL {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 tab_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property MIPSDisassembler::disassembler::tabRow^  tabRow {
                MIPSDisassembler::disassembler::tabRow^  get();
                System::Void set(MIPSDisassembler::disassembler::tabRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Is_classNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Set_classNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsDLLNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetDLLNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Istab_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Settab_IdNull();
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class tabsRowChangeEvent : public ::System::EventArgs {
            
            private: MIPSDisassembler::disassembler::tabsRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            tabsRowChangeEvent(MIPSDisassembler::disassembler::tabsRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property MIPSDisassembler::disassembler::tabsRow^  Row {
                MIPSDisassembler::disassembler::tabsRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class tabRowChangeEvent : public ::System::EventArgs {
            
            private: MIPSDisassembler::disassembler::tabRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            tabRowChangeEvent(MIPSDisassembler::disassembler::tabRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property MIPSDisassembler::disassembler::tabRow^  Row {
                MIPSDisassembler::disassembler::tabRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class processorRowChangeEvent : public ::System::EventArgs {
            
            private: MIPSDisassembler::disassembler::processorRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            processorRowChangeEvent(MIPSDisassembler::disassembler::processorRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property MIPSDisassembler::disassembler::processorRow^  Row {
                MIPSDisassembler::disassembler::processorRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
    };
}
namespace MIPSDisassembler {
    
    
    inline disassembler::disassembler() {
        this->BeginInit();
        this->InitClass();
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &MIPSDisassembler::disassembler::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        __super::Relations->CollectionChanged += schemaChangedHandler;
        this->EndInit();
    }
    
    inline disassembler::disassembler(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataSet(info, context, false) {
        if (this->IsBinarySerialized(info, context) == true) {
            this->InitVars(false);
            ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler1 = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &MIPSDisassembler::disassembler::SchemaChanged);
            this->Tables->CollectionChanged += schemaChangedHandler1;
            this->Relations->CollectionChanged += schemaChangedHandler1;
            return;
        }
        ::System::String^  strSchema = (cli::safe_cast<::System::String^  >(info->GetValue(L"XmlSchema", ::System::String::typeid)));
        if (this->DetermineSchemaSerializationMode(info, context) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
            if (ds->Tables[L"tabs"] != nullptr) {
                __super::Tables->Add((gcnew MIPSDisassembler::disassembler::tabsDataTable(ds->Tables[L"tabs"])));
            }
            if (ds->Tables[L"tab"] != nullptr) {
                __super::Tables->Add((gcnew MIPSDisassembler::disassembler::tabDataTable(ds->Tables[L"tab"])));
            }
            if (ds->Tables[L"processor"] != nullptr) {
                __super::Tables->Add((gcnew MIPSDisassembler::disassembler::processorDataTable(ds->Tables[L"processor"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
        }
        this->GetSerializationData(info, context);
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &MIPSDisassembler::disassembler::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        this->Relations->CollectionChanged += schemaChangedHandler;
    }
    
    inline MIPSDisassembler::disassembler::tabsDataTable^  disassembler::tabs::get() {
        return this->tabletabs;
    }
    
    inline MIPSDisassembler::disassembler::tabDataTable^  disassembler::tab::get() {
        return this->tabletab;
    }
    
    inline MIPSDisassembler::disassembler::processorDataTable^  disassembler::processor::get() {
        return this->tableprocessor;
    }
    
    inline ::System::Data::SchemaSerializationMode disassembler::SchemaSerializationMode::get() {
        return this->_schemaSerializationMode;
    }
    inline System::Void disassembler::SchemaSerializationMode::set(::System::Data::SchemaSerializationMode value) {
        this->_schemaSerializationMode = __identifier(value);
    }
    
    inline ::System::Data::DataTableCollection^  disassembler::Tables::get() {
        return __super::Tables;
    }
    
    inline ::System::Data::DataRelationCollection^  disassembler::Relations::get() {
        return __super::Relations;
    }
    
    inline ::System::Void disassembler::InitializeDerivedDataSet() {
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline ::System::Data::DataSet^  disassembler::Clone() {
        MIPSDisassembler::disassembler^  cln = (cli::safe_cast<MIPSDisassembler::disassembler^  >(__super::Clone()));
        cln->InitVars();
        cln->SchemaSerializationMode = this->SchemaSerializationMode;
        return cln;
    }
    
    inline ::System::Boolean disassembler::ShouldSerializeTables() {
        return false;
    }
    
    inline ::System::Boolean disassembler::ShouldSerializeRelations() {
        return false;
    }
    
    inline ::System::Void disassembler::ReadXmlSerializable(::System::Xml::XmlReader^  reader) {
        if (this->DetermineSchemaSerializationMode(reader) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            this->Reset();
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXml(reader);
            if (ds->Tables[L"tabs"] != nullptr) {
                __super::Tables->Add((gcnew MIPSDisassembler::disassembler::tabsDataTable(ds->Tables[L"tabs"])));
            }
            if (ds->Tables[L"tab"] != nullptr) {
                __super::Tables->Add((gcnew MIPSDisassembler::disassembler::tabDataTable(ds->Tables[L"tab"])));
            }
            if (ds->Tables[L"processor"] != nullptr) {
                __super::Tables->Add((gcnew MIPSDisassembler::disassembler::processorDataTable(ds->Tables[L"processor"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXml(reader);
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchema^  disassembler::GetSchemaSerializable() {
        ::System::IO::MemoryStream^  stream = (gcnew ::System::IO::MemoryStream());
        this->WriteXmlSchema((gcnew ::System::Xml::XmlTextWriter(stream, nullptr)));
        stream->Position = 0;
        return ::System::Xml::Schema::XmlSchema::Read((gcnew ::System::Xml::XmlTextReader(stream)), nullptr);
    }
    
    inline ::System::Void disassembler::InitVars() {
        this->InitVars(true);
    }
    
    inline ::System::Void disassembler::InitVars(::System::Boolean initTable) {
        this->tabletabs = (cli::safe_cast<MIPSDisassembler::disassembler::tabsDataTable^  >(__super::Tables[L"tabs"]));
        if (initTable == true) {
            if (this->tabletabs != nullptr) {
                this->tabletabs->InitVars();
            }
        }
        this->tabletab = (cli::safe_cast<MIPSDisassembler::disassembler::tabDataTable^  >(__super::Tables[L"tab"]));
        if (initTable == true) {
            if (this->tabletab != nullptr) {
                this->tabletab->InitVars();
            }
        }
        this->tableprocessor = (cli::safe_cast<MIPSDisassembler::disassembler::processorDataTable^  >(__super::Tables[L"processor"]));
        if (initTable == true) {
            if (this->tableprocessor != nullptr) {
                this->tableprocessor->InitVars();
            }
        }
        this->relationtabs_tab = this->Relations[L"tabs_tab"];
        this->relationtab_processor = this->Relations[L"tab_processor"];
    }
    
    inline ::System::Void disassembler::InitClass() {
        this->DataSetName = L"disassembler";
        this->Prefix = L"";
        this->EnforceConstraints = true;
        this->SchemaSerializationMode = ::System::Data::SchemaSerializationMode::IncludeSchema;
        this->tabletabs = (gcnew MIPSDisassembler::disassembler::tabsDataTable());
        __super::Tables->Add(this->tabletabs);
        this->tabletab = (gcnew MIPSDisassembler::disassembler::tabDataTable());
        __super::Tables->Add(this->tabletab);
        this->tableprocessor = (gcnew MIPSDisassembler::disassembler::processorDataTable());
        __super::Tables->Add(this->tableprocessor);
        ::System::Data::ForeignKeyConstraint^  fkc;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"tabs_tab", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabletabs->tabs_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabletab->tabs_IdColumn}));
        this->tabletab->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"tab_processor", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabletab->tab_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableprocessor->tab_IdColumn}));
        this->tableprocessor->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        this->relationtabs_tab = (gcnew ::System::Data::DataRelation(L"tabs_tab", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabletabs->tabs_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabletab->tabs_IdColumn}, false));
        this->relationtabs_tab->Nested = true;
        this->Relations->Add(this->relationtabs_tab);
        this->relationtab_processor = (gcnew ::System::Data::DataRelation(L"tab_processor", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabletab->tab_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableprocessor->tab_IdColumn}, false));
        this->relationtab_processor->Nested = true;
        this->Relations->Add(this->relationtab_processor);
    }
    
    inline ::System::Boolean disassembler::ShouldSerializetabs() {
        return false;
    }
    
    inline ::System::Boolean disassembler::ShouldSerializetab() {
        return false;
    }
    
    inline ::System::Boolean disassembler::ShouldSerializeprocessor() {
        return false;
    }
    
    inline ::System::Void disassembler::SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e) {
        if (e->Action == ::System::ComponentModel::CollectionChangeAction::Remove) {
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  disassembler::GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        MIPSDisassembler::disassembler^  ds = (gcnew MIPSDisassembler::disassembler());
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        ::System::Xml::Schema::XmlSchemaAny^  any = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any->Namespace = ds->Namespace;
        sequence->Items->Add(any);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline disassembler::tabsDataTable::tabsDataTable() {
        this->TableName = L"tabs";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline disassembler::tabsDataTable::tabsDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline disassembler::tabsDataTable::tabsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  disassembler::tabsDataTable::tabs_IdColumn::get() {
        return this->columntabs_Id;
    }
    
    inline ::System::Int32 disassembler::tabsDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline MIPSDisassembler::disassembler::tabsRow^  disassembler::tabsDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<MIPSDisassembler::disassembler::tabsRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void disassembler::tabsDataTable::AddtabsRow(MIPSDisassembler::disassembler::tabsRow^  row) {
        this->Rows->Add(row);
    }
    
    inline MIPSDisassembler::disassembler::tabsRow^  disassembler::tabsDataTable::AddtabsRow() {
        MIPSDisassembler::disassembler::tabsRow^  rowtabsRow = (cli::safe_cast<MIPSDisassembler::disassembler::tabsRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(1) {nullptr};
        rowtabsRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowtabsRow);
        return rowtabsRow;
    }
    
    inline ::System::Collections::IEnumerator^  disassembler::tabsDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  disassembler::tabsDataTable::Clone() {
        MIPSDisassembler::disassembler::tabsDataTable^  cln = (cli::safe_cast<MIPSDisassembler::disassembler::tabsDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  disassembler::tabsDataTable::CreateInstance() {
        return (gcnew MIPSDisassembler::disassembler::tabsDataTable());
    }
    
    inline ::System::Void disassembler::tabsDataTable::InitVars() {
        this->columntabs_Id = __super::Columns[L"tabs_Id"];
    }
    
    inline ::System::Void disassembler::tabsDataTable::InitClass() {
        this->columntabs_Id = (gcnew ::System::Data::DataColumn(L"tabs_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columntabs_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columntabs_Id}, 
                true)));
        this->columntabs_Id->AutoIncrement = true;
        this->columntabs_Id->AllowDBNull = false;
        this->columntabs_Id->Unique = true;
    }
    
    inline MIPSDisassembler::disassembler::tabsRow^  disassembler::tabsDataTable::NewtabsRow() {
        return (cli::safe_cast<MIPSDisassembler::disassembler::tabsRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  disassembler::tabsDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew MIPSDisassembler::disassembler::tabsRow(builder));
    }
    
    inline ::System::Type^  disassembler::tabsDataTable::GetRowType() {
        return MIPSDisassembler::disassembler::tabsRow::typeid;
    }
    
    inline ::System::Void disassembler::tabsDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->tabsRowChanged(this, (gcnew MIPSDisassembler::disassembler::tabsRowChangeEvent((cli::safe_cast<MIPSDisassembler::disassembler::tabsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void disassembler::tabsDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->tabsRowChanging(this, (gcnew MIPSDisassembler::disassembler::tabsRowChangeEvent((cli::safe_cast<MIPSDisassembler::disassembler::tabsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void disassembler::tabsDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->tabsRowDeleted(this, (gcnew MIPSDisassembler::disassembler::tabsRowChangeEvent((cli::safe_cast<MIPSDisassembler::disassembler::tabsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void disassembler::tabsDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->tabsRowDeleting(this, (gcnew MIPSDisassembler::disassembler::tabsRowChangeEvent((cli::safe_cast<MIPSDisassembler::disassembler::tabsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void disassembler::tabsDataTable::RemovetabsRow(MIPSDisassembler::disassembler::tabsRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  disassembler::tabsDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        MIPSDisassembler::disassembler^  ds = (gcnew MIPSDisassembler::disassembler());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"tabsDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline disassembler::tabDataTable::tabDataTable() {
        this->TableName = L"tab";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline disassembler::tabDataTable::tabDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline disassembler::tabDataTable::tabDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  disassembler::tabDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  disassembler::tabDataTable::tab_IdColumn::get() {
        return this->columntab_Id;
    }
    
    inline ::System::Data::DataColumn^  disassembler::tabDataTable::tabs_IdColumn::get() {
        return this->columntabs_Id;
    }
    
    inline ::System::Int32 disassembler::tabDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline MIPSDisassembler::disassembler::tabRow^  disassembler::tabDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<MIPSDisassembler::disassembler::tabRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void disassembler::tabDataTable::AddtabRow(MIPSDisassembler::disassembler::tabRow^  row) {
        this->Rows->Add(row);
    }
    
    inline MIPSDisassembler::disassembler::tabRow^  disassembler::tabDataTable::AddtabRow(System::String^  name, MIPSDisassembler::disassembler::tabsRow^  parenttabsRowBytabs_tab) {
        MIPSDisassembler::disassembler::tabRow^  rowtabRow = (cli::safe_cast<MIPSDisassembler::disassembler::tabRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {name, nullptr, nullptr};
        if (parenttabsRowBytabs_tab != nullptr) {
            columnValuesArray[2] = parenttabsRowBytabs_tab[0];
        }
        rowtabRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowtabRow);
        return rowtabRow;
    }
    
    inline ::System::Collections::IEnumerator^  disassembler::tabDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  disassembler::tabDataTable::Clone() {
        MIPSDisassembler::disassembler::tabDataTable^  cln = (cli::safe_cast<MIPSDisassembler::disassembler::tabDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  disassembler::tabDataTable::CreateInstance() {
        return (gcnew MIPSDisassembler::disassembler::tabDataTable());
    }
    
    inline ::System::Void disassembler::tabDataTable::InitVars() {
        this->columnname = __super::Columns[L"name"];
        this->columntab_Id = __super::Columns[L"tab_Id"];
        this->columntabs_Id = __super::Columns[L"tabs_Id"];
    }
    
    inline ::System::Void disassembler::tabDataTable::InitClass() {
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->columntab_Id = (gcnew ::System::Data::DataColumn(L"tab_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columntab_Id);
        this->columntabs_Id = (gcnew ::System::Data::DataColumn(L"tabs_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columntabs_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columntab_Id}, 
                true)));
        this->columnname->Namespace = L"";
        this->columntab_Id->AutoIncrement = true;
        this->columntab_Id->AllowDBNull = false;
        this->columntab_Id->Unique = true;
    }
    
    inline MIPSDisassembler::disassembler::tabRow^  disassembler::tabDataTable::NewtabRow() {
        return (cli::safe_cast<MIPSDisassembler::disassembler::tabRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  disassembler::tabDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew MIPSDisassembler::disassembler::tabRow(builder));
    }
    
    inline ::System::Type^  disassembler::tabDataTable::GetRowType() {
        return MIPSDisassembler::disassembler::tabRow::typeid;
    }
    
    inline ::System::Void disassembler::tabDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->tabRowChanged(this, (gcnew MIPSDisassembler::disassembler::tabRowChangeEvent((cli::safe_cast<MIPSDisassembler::disassembler::tabRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void disassembler::tabDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->tabRowChanging(this, (gcnew MIPSDisassembler::disassembler::tabRowChangeEvent((cli::safe_cast<MIPSDisassembler::disassembler::tabRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void disassembler::tabDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->tabRowDeleted(this, (gcnew MIPSDisassembler::disassembler::tabRowChangeEvent((cli::safe_cast<MIPSDisassembler::disassembler::tabRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void disassembler::tabDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->tabRowDeleting(this, (gcnew MIPSDisassembler::disassembler::tabRowChangeEvent((cli::safe_cast<MIPSDisassembler::disassembler::tabRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void disassembler::tabDataTable::RemovetabRow(MIPSDisassembler::disassembler::tabRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  disassembler::tabDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        MIPSDisassembler::disassembler^  ds = (gcnew MIPSDisassembler::disassembler());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"tabDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline disassembler::processorDataTable::processorDataTable() {
        this->TableName = L"processor";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline disassembler::processorDataTable::processorDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline disassembler::processorDataTable::processorDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  disassembler::processorDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  disassembler::processorDataTable::_classColumn::get() {
        return this->column_class;
    }
    
    inline ::System::Data::DataColumn^  disassembler::processorDataTable::DLLColumn::get() {
        return this->columnDLL;
    }
    
    inline ::System::Data::DataColumn^  disassembler::processorDataTable::tab_IdColumn::get() {
        return this->columntab_Id;
    }
    
    inline ::System::Int32 disassembler::processorDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline MIPSDisassembler::disassembler::processorRow^  disassembler::processorDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<MIPSDisassembler::disassembler::processorRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void disassembler::processorDataTable::AddprocessorRow(MIPSDisassembler::disassembler::processorRow^  row) {
        this->Rows->Add(row);
    }
    
    inline MIPSDisassembler::disassembler::processorRow^  disassembler::processorDataTable::AddprocessorRow(System::String^  name, 
                System::String^  _class, System::String^  DLL, MIPSDisassembler::disassembler::tabRow^  parenttabRowBytab_processor) {
        MIPSDisassembler::disassembler::processorRow^  rowprocessorRow = (cli::safe_cast<MIPSDisassembler::disassembler::processorRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {name, _class, DLL, 
            nullptr};
        if (parenttabRowBytab_processor != nullptr) {
            columnValuesArray[3] = parenttabRowBytab_processor[1];
        }
        rowprocessorRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowprocessorRow);
        return rowprocessorRow;
    }
    
    inline ::System::Collections::IEnumerator^  disassembler::processorDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  disassembler::processorDataTable::Clone() {
        MIPSDisassembler::disassembler::processorDataTable^  cln = (cli::safe_cast<MIPSDisassembler::disassembler::processorDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  disassembler::processorDataTable::CreateInstance() {
        return (gcnew MIPSDisassembler::disassembler::processorDataTable());
    }
    
    inline ::System::Void disassembler::processorDataTable::InitVars() {
        this->columnname = __super::Columns[L"name"];
        this->column_class = __super::Columns[L"class"];
        this->columnDLL = __super::Columns[L"DLL"];
        this->columntab_Id = __super::Columns[L"tab_Id"];
    }
    
    inline ::System::Void disassembler::processorDataTable::InitClass() {
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->column_class = (gcnew ::System::Data::DataColumn(L"class", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->column_class);
        this->columnDLL = (gcnew ::System::Data::DataColumn(L"DLL", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnDLL);
        this->columntab_Id = (gcnew ::System::Data::DataColumn(L"tab_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columntab_Id);
        this->columnname->Namespace = L"";
        this->column_class->Namespace = L"";
        this->columnDLL->Namespace = L"";
    }
    
    inline MIPSDisassembler::disassembler::processorRow^  disassembler::processorDataTable::NewprocessorRow() {
        return (cli::safe_cast<MIPSDisassembler::disassembler::processorRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  disassembler::processorDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew MIPSDisassembler::disassembler::processorRow(builder));
    }
    
    inline ::System::Type^  disassembler::processorDataTable::GetRowType() {
        return MIPSDisassembler::disassembler::processorRow::typeid;
    }
    
    inline ::System::Void disassembler::processorDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->processorRowChanged(this, (gcnew MIPSDisassembler::disassembler::processorRowChangeEvent((cli::safe_cast<MIPSDisassembler::disassembler::processorRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void disassembler::processorDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->processorRowChanging(this, (gcnew MIPSDisassembler::disassembler::processorRowChangeEvent((cli::safe_cast<MIPSDisassembler::disassembler::processorRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void disassembler::processorDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->processorRowDeleted(this, (gcnew MIPSDisassembler::disassembler::processorRowChangeEvent((cli::safe_cast<MIPSDisassembler::disassembler::processorRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void disassembler::processorDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->processorRowDeleting(this, (gcnew MIPSDisassembler::disassembler::processorRowChangeEvent((cli::safe_cast<MIPSDisassembler::disassembler::processorRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void disassembler::processorDataTable::RemoveprocessorRow(MIPSDisassembler::disassembler::processorRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  disassembler::processorDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        MIPSDisassembler::disassembler^  ds = (gcnew MIPSDisassembler::disassembler());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"processorDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline disassembler::tabsRow::tabsRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tabletabs = (cli::safe_cast<MIPSDisassembler::disassembler::tabsDataTable^  >(this->Table));
    }
    
    inline System::Int32 disassembler::tabsRow::tabs_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tabletabs->tabs_IdColumn]));
    }
    inline System::Void disassembler::tabsRow::tabs_Id::set(System::Int32 value) {
        this[this->tabletabs->tabs_IdColumn] = value;
    }
    
    inline cli::array< MIPSDisassembler::disassembler::tabRow^  >^  disassembler::tabsRow::GettabRows() {
        if (this->Table->ChildRelations[L"tabs_tab"] == nullptr) {
            return gcnew cli::array< MIPSDisassembler::disassembler::tabRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< MIPSDisassembler::disassembler::tabRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"tabs_tab"])));
        }
    }
    
    
    inline disassembler::tabRow::tabRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tabletab = (cli::safe_cast<MIPSDisassembler::disassembler::tabDataTable^  >(this->Table));
    }
    
    inline System::String^  disassembler::tabRow::name::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tabletab->nameColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'name\' in table \'tab\' is DBNull.", e));
        }
    }
    inline System::Void disassembler::tabRow::name::set(System::String^  value) {
        this[this->tabletab->nameColumn] = value;
    }
    
    inline System::Int32 disassembler::tabRow::tab_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tabletab->tab_IdColumn]));
    }
    inline System::Void disassembler::tabRow::tab_Id::set(System::Int32 value) {
        this[this->tabletab->tab_IdColumn] = value;
    }
    
    inline System::Int32 disassembler::tabRow::tabs_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tabletab->tabs_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'tabs_Id\' in table \'tab\' is DBNull.", e));
        }
    }
    inline System::Void disassembler::tabRow::tabs_Id::set(System::Int32 value) {
        this[this->tabletab->tabs_IdColumn] = value;
    }
    
    inline MIPSDisassembler::disassembler::tabsRow^  disassembler::tabRow::tabsRow::get() {
        return (cli::safe_cast<MIPSDisassembler::disassembler::tabsRow^  >(this->GetParentRow(this->Table->ParentRelations[L"tabs_tab"])));
    }
    inline System::Void disassembler::tabRow::tabsRow::set(MIPSDisassembler::disassembler::tabsRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"tabs_tab"]);
    }
    
    inline ::System::Boolean disassembler::tabRow::IsnameNull() {
        return this->IsNull(this->tabletab->nameColumn);
    }
    
    inline ::System::Void disassembler::tabRow::SetnameNull() {
        this[this->tabletab->nameColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean disassembler::tabRow::Istabs_IdNull() {
        return this->IsNull(this->tabletab->tabs_IdColumn);
    }
    
    inline ::System::Void disassembler::tabRow::Settabs_IdNull() {
        this[this->tabletab->tabs_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< MIPSDisassembler::disassembler::processorRow^  >^  disassembler::tabRow::GetprocessorRows() {
        if (this->Table->ChildRelations[L"tab_processor"] == nullptr) {
            return gcnew cli::array< MIPSDisassembler::disassembler::processorRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< MIPSDisassembler::disassembler::processorRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"tab_processor"])));
        }
    }
    
    
    inline disassembler::processorRow::processorRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableprocessor = (cli::safe_cast<MIPSDisassembler::disassembler::processorDataTable^  >(this->Table));
    }
    
    inline System::String^  disassembler::processorRow::name::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableprocessor->nameColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'name\' in table \'processor\' is DBNull.", 
                e));
        }
    }
    inline System::Void disassembler::processorRow::name::set(System::String^  value) {
        this[this->tableprocessor->nameColumn] = value;
    }
    
    inline System::String^  disassembler::processorRow::_class::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableprocessor->_classColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'class\' in table \'processor\' is DBNull.", 
                e));
        }
    }
    inline System::Void disassembler::processorRow::_class::set(System::String^  value) {
        this[this->tableprocessor->_classColumn] = value;
    }
    
    inline System::String^  disassembler::processorRow::DLL::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableprocessor->DLLColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'DLL\' in table \'processor\' is DBNull.", 
                e));
        }
    }
    inline System::Void disassembler::processorRow::DLL::set(System::String^  value) {
        this[this->tableprocessor->DLLColumn] = value;
    }
    
    inline System::Int32 disassembler::processorRow::tab_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableprocessor->tab_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'tab_Id\' in table \'processor\' is DBNull.", 
                e));
        }
    }
    inline System::Void disassembler::processorRow::tab_Id::set(System::Int32 value) {
        this[this->tableprocessor->tab_IdColumn] = value;
    }
    
    inline MIPSDisassembler::disassembler::tabRow^  disassembler::processorRow::tabRow::get() {
        return (cli::safe_cast<MIPSDisassembler::disassembler::tabRow^  >(this->GetParentRow(this->Table->ParentRelations[L"tab_processor"])));
    }
    inline System::Void disassembler::processorRow::tabRow::set(MIPSDisassembler::disassembler::tabRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"tab_processor"]);
    }
    
    inline ::System::Boolean disassembler::processorRow::IsnameNull() {
        return this->IsNull(this->tableprocessor->nameColumn);
    }
    
    inline ::System::Void disassembler::processorRow::SetnameNull() {
        this[this->tableprocessor->nameColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean disassembler::processorRow::Is_classNull() {
        return this->IsNull(this->tableprocessor->_classColumn);
    }
    
    inline ::System::Void disassembler::processorRow::Set_classNull() {
        this[this->tableprocessor->_classColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean disassembler::processorRow::IsDLLNull() {
        return this->IsNull(this->tableprocessor->DLLColumn);
    }
    
    inline ::System::Void disassembler::processorRow::SetDLLNull() {
        this[this->tableprocessor->DLLColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean disassembler::processorRow::Istab_IdNull() {
        return this->IsNull(this->tableprocessor->tab_IdColumn);
    }
    
    inline ::System::Void disassembler::processorRow::Settab_IdNull() {
        this[this->tableprocessor->tab_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline disassembler::tabsRowChangeEvent::tabsRowChangeEvent(MIPSDisassembler::disassembler::tabsRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline MIPSDisassembler::disassembler::tabsRow^  disassembler::tabsRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction disassembler::tabsRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline disassembler::tabRowChangeEvent::tabRowChangeEvent(MIPSDisassembler::disassembler::tabRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline MIPSDisassembler::disassembler::tabRow^  disassembler::tabRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction disassembler::tabRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline disassembler::processorRowChangeEvent::processorRowChangeEvent(MIPSDisassembler::disassembler::processorRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline MIPSDisassembler::disassembler::processorRow^  disassembler::processorRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction disassembler::processorRowChangeEvent::Action::get() {
        return this->eventAction;
    }
}
